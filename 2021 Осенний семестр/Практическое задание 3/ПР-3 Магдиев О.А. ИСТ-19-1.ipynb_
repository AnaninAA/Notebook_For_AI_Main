{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ПР-3 Магдиев О.А. ИСТ-19-1.ipynb\"","provenance":[{"file_id":"1YUHZVyI_4-7CkeTCoqsWq7sU-jft6qka","timestamp":1632266271124}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.8"}},"cells":[{"cell_type":"code","metadata":{"id":"jCIIG4eCyMrP","executionInfo":{"status":"ok","timestamp":1632340020222,"user_tz":-180,"elapsed":24,"user":{"displayName":"Marleena M.","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01554857910732208880"}}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import sklearn as sk"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"0NkLKSbfyMrX","executionInfo":{"status":"ok","timestamp":1632340021424,"user_tz":-180,"elapsed":263,"user":{"displayName":"Marleena M.","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01554857910732208880"}}},"source":["# Генерируем уникальный seed\n","my_code = \"Marleena\"\n","seed_limit = 2 ** 32\n","my_seed = int.from_bytes(my_code.encode(), \"little\") % seed_limit\n","\n","np.random.seed(my_seed)"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"lUgiKH3ujA_O"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"VAABYAScyMrc","scrolled":false,"executionInfo":{"status":"ok","timestamp":1632340028365,"user_tz":-180,"elapsed":844,"user":{"displayName":"Marleena M.","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01554857910732208880"}},"outputId":"ab275c11-856d-4bcd-a71f-b4f38427f959"},"source":["# Формируем случайную нормально распределенную выборку sample\n","N = 10000\n","sample = np.random.normal(0, 1, N)\n","\n","plt.hist(sample, bins=100)\n","plt.show()"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"scrolled":true,"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"Si5tvEFQh8po","executionInfo":{"status":"ok","timestamp":1632266266943,"user_tz":-180,"elapsed":604,"user":{"displayName":"Marleena M.","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01554857910732208880"}},"outputId":"9ab72b9a-db29-4d83-dca9-145a7a7daa83"},"source":["# Формируем массив целевых метока классов: 0 - если значение в sample меньше t и 1 - если больше\n","t = 0\n","target_labels = np.array([0 if i < t else 1 for i in sample])\n","plt.hist(target_labels, bins=100)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"lpiBPPw1yMr_"},"source":["# Используя данные заготовки (или, при желании, не используя), \n","# реализуйте функции для рассчета accuracy, precision, recall и F1\n","\n","def confusion_matrix(target_labels, model_labels) :\n","    tp = 0\n","    tn = 0\n","    fp = 0\n","    fn = 0\n","    for i in range(len(target_labels)) :\n","        if target_labels[i] == 1 and model_labels[i] == 1 :\n","            tp += 1\n","        if target_labels[i] == 0 and model_labels[i] == 0 :\n","            tn += 1\n","        if target_labels[i] == 0 and model_labels[i] == 1 :\n","            fp += 1\n","        if target_labels[i] == 1 and model_labels[i] == 0 :\n","            fn += 1\n","    return tp, tn, fp, fn\n","\n","def accuracy (target_labels, model_labels) :\n","    tp, tn, fp, fn = confusion_matrix(target_labels, model_labels)\n","    return ((tp+tn)/(tp+fp+tn+fn))\n","def precision (target_labels, model_labels) :\n","    tp, tn, fp, fn = confusion_matrix(target_labels, model_labels)\n","    return (tp/(tp+fp))\n","\n","def recall (target_labels, model_labels) :\n","    tp, tn, fp, fn = confusion_matrix(target_labels, model_labels)\n","    return (tp/(tp+fn))\n","\n","def F1 (target_labels, model_labels) :\n","    tp, tn, fp, fn = confusion_matrix(target_labels, model_labels)\n","    return 2*((precision (target_labels, model_labels)*recall (target_labels, model_labels))/(precision (target_labels, model_labels)+recall (target_labels, model_labels)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"o-aTJeozh8pr","executionInfo":{"status":"ok","timestamp":1632266267191,"user_tz":-180,"elapsed":253,"user":{"displayName":"Marleena M.","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01554857910732208880"}},"outputId":"650cb425-9c25-4f49-8ebb-e30cad02d618"},"source":["# Первый эксперимент: t = 0, модель с вероятностью 50% возвращает 0 и 1\n","t = 0\n","target_labels = np.array([0 if i < t else 1 for i in sample])\n","\n","model_labels = np.random.randint(2, size=N)\n","print(accuracy (target_labels, model_labels))\n","print(precision (target_labels, model_labels))\n","print(recall (target_labels, model_labels))\n","print(F1 (target_labels, model_labels))\n","\n","# Рассчитайте и выведите значения метрик accuracy, precision, recall и F1."],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5014\n","0.49612094688681124\n","0.5041439256114817\n","0.5001002606777621\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zPc6KJBGh8ps","executionInfo":{"status":"ok","timestamp":1632266267519,"user_tz":-180,"elapsed":332,"user":{"displayName":"Marleena M.","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01554857910732208880"}},"outputId":"0bd7d58e-2120-4f83-ecb6-62d8377b7521"},"source":["# Второй эксперимент: t = 0, модель с вероятностью 25% возвращает 0 и с 75% - 1\n","t = 0\n","target_labels = np.array([0 if i < t else 1 for i in sample])\n","\n","labels = np.random.randint(4, size=N)\n","model_labels = np.array([0 if i == 0 else 1 for i in labels])\n","np.random.shuffle(model_labels)\n","print(accuracy (target_labels, model_labels))\n","print(precision (target_labels, model_labels))\n","print(recall (target_labels, model_labels))\n","print(F1 (target_labels, model_labels))\n","# Рассчитайте и выведите значения метрик accuracy, precision, recall и F1."],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.4878\n","0.4883720930232558\n","0.742874469375379\n","0.5893200769724182\n"]}]},{"cell_type":"code","metadata":{"id":"O5HU4aGMh8pt"},"source":["# Проанализируйте, какие из метрик применимы в первом и втором экспериментах."],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ldHtGWEMh8pv","executionInfo":{"status":"ok","timestamp":1632266267521,"user_tz":-180,"elapsed":12,"user":{"displayName":"Marleena M.","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01554857910732208880"}},"outputId":"f5c10c57-bfdf-48ee-8c54-fcb81e9adfff"},"source":["# Третий эксперимент: t = 2, модель с вероятностью 50% возвращает 0 и 1\n","t = 2\n","target_labels = np.array([0 if i < t else 1 for i in sample])\n","\n","model_labels = np.random.randint(2, size=N)\n","print(accuracy (target_labels, model_labels))\n","print(precision (target_labels, model_labels))\n","print(recall (target_labels, model_labels))\n","print(F1 (target_labels, model_labels))\n","# Рассчитайте и выведите значения метрик accuracy, precision, recall и F1."],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.4941\n","0.023214285714285715\n","0.4624505928853755\n","0.0442093330814283\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vdwJaPM0h8pw","executionInfo":{"status":"ok","timestamp":1632266267827,"user_tz":-180,"elapsed":313,"user":{"displayName":"Marleena M.","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01554857910732208880"}},"outputId":"5b83777f-cf4d-416b-a09d-1fe4499006ea"},"source":["# Четвёртый эксперимент: t = 2, модель с вероятностью 100% возвращает 0\n","t = 2\n","target_labels = np.array([0 if i < t else 1 for i in sample])\n","\n","model_labels = np.zeros(N)\n","print(accuracy (target_labels, model_labels))\n","#print(precision (target_labels, model_labels)) деление на ноль\n","print(recall (target_labels, model_labels))\n","#print(F1 (target_labels, model_labels)) деление на ноль\n","# Рассчитайте и выведите значения метрик accuracy, precision, recall и F1."],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9747\n","0.0\n"]}]},{"cell_type":"code","metadata":{"id":"QMcr_nofh8py"},"source":["# Проанализируйте, какие из метрик применимы в третьем и четвёртом экспериментах."],"execution_count":null,"outputs":[]}]}